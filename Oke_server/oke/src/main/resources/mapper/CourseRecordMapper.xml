<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bnuz.oke.dao.CourseRecordDao">

    <select id="queryByCourseNumberWithScore" resultType="com.bnuz.oke.dto.CourseRecordData">
        select
            cr.online_time as "courseRecord.onlineTime", cr.offline_time as "courseRecord.offlineTime",
            c.course_number as "courseRecord.course.courseNumber", course_name as "courseRecord.course.courseName", course_create_time as "courseRecord.course.courseCreateTime", course_end_time as "course.courseEndTime", teacher_id as "course.teacher.teacherId",
            s.student_id as "courseRecord.student.studentId", student_number as "courseRecord.student.studentNumber", student_name as "courseRecord.student.studentName", student_class as "courseRecord.student.studentClass", username as "courseRecord.student.user.username",
            sum(sa.answer_correct * q.question_score) as "score"
        from course_record cr, course c, student s, student_answer sa, question q
        where cr.course_number = c.course_number and cr.student_id = s.student_id and sa.student_id = cr.student_id and sa.question_id = q.question_id and cr.course_number = #{courseNumber}
        group by cr.student_id
    </select>

    <select id="queryByCourseNumberAndStudentId" resultType="com.bnuz.oke.entity.CourseRecord">
        select
            cr.online_time, cr.offline_time,
            c.course_number as "course.courseNumber", course_name as "course.courseName", course_create_time as "course.courseCreateTime", course_end_time as "course.courseEndTime", teacher_id as "course.teacher.teacherId",
            s.student_id as "student.studentId", student_number as "student.studentNumber", student_name as "student.studentName", student_class as "student.studentClass", username as "student.user.username"
        from course_record cr, course c, student s
        where cr.course_number = c.course_number and cr.student_id = s.student_id and cr.course_number = #{courseNumber} and cr.student_id = #{studentId}
    </select>

    <select id="queryByCourseNumber" resultType="com.bnuz.oke.entity.CourseRecord">
        select
            cr.online_time, cr.offline_time,
            c.course_number as "course.courseNumber", course_name as "course.courseName", course_create_time as "course.courseCreateTime", course_end_time as "course.courseEndTime", teacher_id as "course.teacher.teacherId",
            s.student_id as "student.studentId", student_number as "student.studentNumber", student_name as "student.studentName", student_class as "student.studentClass", username as "student.user.username"
        from course_record cr, course c, student s
        where cr.course_number = c.course_number and cr.student_id = s.student_id and cr.course_number = #{courseNumber}
    </select>

    <select id="queryByStudentId" resultType="com.bnuz.oke.entity.CourseRecord">
        select
            cr.online_time, cr.offline_time,
            c.course_number as "course.courseNumber", course_name as "course.courseName", course_create_time as "course.courseCreateTime", course_end_time as "course.courseEndTime", c.teacher_id as "course.teacher.teacherId",
            s.student_id as "student.studentId",
            t.teacher_name as "course.teacher.teacherName", t.teacher_title as "course.teacher.teacherTitle"
        from course_record cr, course c, student s, teacher t
        where c.teacher_id = t.teacher_id and cr.course_number = c.course_number and cr.student_id = s.student_id and cr.student_id = #{studentId}
        order by c.course_create_time desc
    </select>

    <insert id="insertCourseRecord" parameterType="com.bnuz.oke.entity.CourseRecord">
        insert into
            course_record(course_number, online_time, student_id)
        value
            (#{course.courseNumber}, now(), #{student.studentId})
    </insert>

    <update id="updateCourseRecord" parameterType="com.bnuz.oke.entity.CourseRecord">
        update course_record
        <set>
            <if test="offlineTime != null">offline_time = #{offlineTime},</if>
        </set>
        where course_number = #{course.courseNumber} and student_id = #{student.studentId}
    </update>
</mapper>